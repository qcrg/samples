#!/bin/python3

import tarfile
import os
import sys
import shutil


default_config = [("PREFIX", "/usr"),
                  ("DIR_NAME", "templates"),
                  ("IGNORE", []),
                  ("COMPLETION_DIR",
                   "/etc/bash_completion.d")]
use_default_if_not_exist_config = False
config_file_paths = ["/etc/pnd_template.conf",
                     "/usr/local/etc/pnd_template.conf"]
share_name = "/share/"

config = dict()
template_names = []
installer = None
template_name = str()

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs);

def print_usage(print_function = print):
    pf = print_function
    prog_name = os.path.basename(sys.argv[0])
    pf("Usage: {} [options] <template type>".format(prog_name))
    print("Template types:")
    for name in template_names:
        print("    " + name.replace(".tgz", ''))
    pf("options:")
    pf("    -h  print this page")
    pf("    -f  force instantiation, even if there are files")

class FilesInstaller:
    def __init__(self):
        self.installed_files = []
        self.installed_dirs = []
        self.force = False
        self.is_bad = False

    def __del__(self):
        if  self.is_bad:
            self.restore_installed()

    def restore_installed(self):
        for file in self.installed_files:
            os.unlink(file)
        for dir_ in reversed(self.installed_dirs):
            os.rmdir(dir_)

    def install_dir(self, dst):
        try:
            os.mkdir(dst)
            self.installed_dirs.append(dst)
        except FileExistsError:
            pass
        except:
            self.is_bad = True
            raise

    def install_file(self, src, dst):
        if not self.force and os.path.exists(dst):
            self.is_bad = True
            raise Exception("File exists [{}]".format(dst))
        shutil.move(src, dst)
        self.installed_files.append(dst)

    def install(self, src_dir, dst_dir):
        for (dir_path, dir_names, file_names) in os.walk(src_dir):
            for dir_name in dir_names:
                self.install_dir(dst_dir + '/' + dir_name)
            for file_name in file_names:
                src = dir_path + '/' + file_name
                prefix = os.path.commonpath([dir_path, src_dir])
                dst_prefix = dir_path[len(prefix):]
                dst = dst_dir + '/' + dst_prefix + '/' + file_name
                self.install_file(src, dst)

installer = FilesInstaller()

def update_options():
    global template_name
    for arg in sys.argv[1:]:
        if arg == "-f":
            installer.force = True
            continue
        if arg == "-h":
            print_usage(print)
            exit(0)
        if arg[0] == '-':
            # print_usage(eprint)
            raise Exception("Option is undefined [{}]".format(arg))
        if template_name != "":
            print_usage(eprint)
            raise Exception("Second template name defined [{}, {}]".format(
                template_name, arg))
        template_name = arg

def check_config(config):
    def check_opt(opt_name):
        if not opt_name in config:
            raise Exception(opt_name + " is not set")
        if len(config[opt_name]) < 1:
            raise Exception(opt_name + " is empty")
    check_opt("PREFIX")
    check_opt("DIR_NAME")
    check_opt("COMPLETION_DIR")

def update_config_types():
    config["IGNORE"] = config["IGNORE"].split(',')

def load_config_file():
    for name in config_file_paths:
        try:
            return open(name, "r")
        except FileNotFoundError:
            pass

    if use_default_if_not_exist_config:
        return default_config
    raise FileNotFoundError("Config file not found")

def update_config():
    config_file = load_config_file()

    while True:
        next_line = config_file.readline()
        next_line = next_line.strip()
        if not next_line:
            break
        if next_line[0] == '#':
            continue
        opt = next_line.split("=")
        if len(opt) != 2:
            raise Exception("Option [{}] is bad, must be [A=B]".format(opt))
        config[opt[0]] = opt[1]
    update_config_types()
    check_config(config)

def update_template_names():
    dir_name = config["PREFIX"] + share_name + config["DIR_NAME"]
    res = []
    for file in os.listdir(dir_name):
        path = dir_name + '/' + file
        if os.path.isfile(path) and tarfile.is_tarfile(path):
            template_names.append(file)

def create_temp_dir():
    dir_path = "/tmp/" + config["DIR_NAME"]
    try:
        os.mkdir(dir_path)
    except FileExistsError:
        pass
    return dir_path

def copy_all_files(src_dir, dst_dir):
    installer.install(src_dir, dst_dir)

def check_template(templ_path):
    if not (os.path.exists(templ_path) or tarfile.is_tarfile(templ_path)):
        raise Exception("Template not found: " + template_name)

def process_behaviour():
    if len(sys.argv) < 2:
        print_usage()
    else:
        temp_dir = create_temp_dir()
        templ_path = config["PREFIX"] + share_name + config["DIR_NAME"] + \
                '/' + template_name + ".tgz"
        if not os.path.exists(templ_path):
            raise Exception("Template is not exists [{}]".format(template_name))
        check_template(templ_path)
        tar = tarfile.open(templ_path, "r:gz")
        tar.extractall(temp_dir)
        copy_all_files(temp_dir + '/' + template_name, '.')

def main():
    try:
        update_config()
        update_template_names()
        update_options()
        create_temp_dir()
        process_behaviour()
    except Exception as ex:
        eprint("ERROR:", ex)


main()
